4.1 Конспект:

1. Virtualenv:
Virtualenv - это инструмент, который позволяет создавать изолированные среды Python для управления зависимостями проекта. 

Пример создания виртуальной среды:

$ virtualenv myenv
$ source myenv/bin/activate


2. Pipfile:
Pipfile - это файл, используемый для управления зависимостями проекта и виртуальным окружением. Он содержит информацию о зависимостях и версиях пакетов.

Пример Pipfile:

[[source]]
url = "https://pypi.org/simple"
verify_ssl = true

[packages]
requests = "*"
Flask = "*"

[dev-packages]
pytest = "*"


3. Pyenv:
Pyenv - это утилита для управления версиями Python на вашей системе. Она позволяет устанавливать и использовать различные версии Python параллельно.

Пример установки версии Python с помощью Pyenv:

$ pyenv install 3.8.2
$ pyenv global 3.8.2


4. Pipenv:
Pipenv - это комбинация инструмента управления зависимостями и виртуального окружения для Python. Он автоматически создает и управляет виртуальной средой для проекта.

Пример использования Pipenv:

$ pipenv install requests
$ pipenv shell


5. Venv:
Venv - это модуль Python, который позволяет создавать изолированные среды Python внутри проекта.

Пример создания виртуальной среды с помощью Venv:

$ python -m venv myenv
$ source myenv/bin/activate


4.2 Глоссарий команд для создания виртуального окружения с использованием Pipenv:

1. Установить Pipenv:

$ pip install pipenv


2. Создать виртуальное окружение:

$ pipenv shell


3. Установить зависимости:

$ pipenv install package_name


4. Обновить зависимости:

$ pipenv update


5. Удалить виртуальное окружение:

$ pipenv --rm
