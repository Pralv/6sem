1.1. Пример скрипта для вычисления статистических показателей для данных из CSV-файла:

import csv
import math

def calculate_statistics(data):
    n = len(data)
    mean = sum(data) / n
    variance = sum((x - mean) ** 2 for x in data) / n
    std_dev = math.sqrt(variance)
    
    return mean, variance, std_dev

file_path = 'data.csv'

with open(file_path, 'r') as file:
    reader = csv.reader(file)
    data = [float(row[0]) for row in reader]

mean, variance, std_dev = calculate_statistics(data)

print("Mean:", mean)
print("Variance:", variance)
print("Standard Deviation:", std_dev)


1.2. Рефакторинг скрипта с использованием библиотеки numpy:

import numpy as np

def calculate_statistics(data):
    mean = np.mean(data)
    variance = np.var(data)
    std_dev = np.std(data)
    
    return mean, variance, std_dev

file_path = 'data.csv'

data = np.genfromtxt(file_path, delimiter=',')

mean, variance, std_dev = calculate_statistics(data)

print("Mean:", mean)
print("Variance:", variance)
print("Standard Deviation:", std_dev)


1.3. Пример кода для построения точечной диаграммы с моделью квадратичной функции:

import matplotlib.pyplot as plt
import numpy as np

# Данные точечной диаграммы
x = np.array([1, 2, 3, 4, 5])
y = np.array([2, 3, 5, 7, 9])

# Построение точечной диаграммы
plt.scatter(x, y, color='blue')

# Модель квадратичной функции
p = np.polyfit(x, y, 2)
f = np.poly1d(p)

# Вычисление предсказанных значений
x_pred = np.linspace(0, 6, 100)
y_pred = f(x_pred)

# Построение графика модели
plt.plot(x_pred, y_pred, color='red')

# Отображение графика
plt.show()

# Вычисление отклонения данных модели от реальных данных
y_predicted = f(x)
deviation = y - y_predicted
print("Deviation:", deviation)
